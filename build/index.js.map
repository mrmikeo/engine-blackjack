{"version":3,"sources":["webpack:///webpack/bootstrap a86bfdd330422da18c74","webpack:///./src/constants.js","webpack:///./src/actions.js","webpack:///./src/engine.js","webpack:///./src/presets.js","webpack:///./src/index.js","webpack:///./src/game.js","webpack:///./src/paytables/luchyLuchy.js","webpack:///external \"52-deck\""],"names":["INVALID","RESTORE","DEAL","INSURANCE","SPLIT","HIT","DOUBLE","STAND","SURRENDER","SHOWDOWN","DEALER_HIT","RIGHT","LEFT","STAGE_READY","STAGE_PLAYER_TURN_RIGHT","STAGE_PLAYER_TURN_LEFT","STAGE_SHOWDOWN","STAGE_DEALER_TURN","STAGE_DONE","TYPES","invalid","action","info","type","payload","restore","deal","bet","sideBets","luckyLucky","insurance","split","hit","position","double","stand","surrender","showdown","dealerHoleCardOnly","dealerHit","dealerHoleCard","isNull","obj","isUndefined","undefined","isNullOrUndef","calculate","array","length","value","hi","lo","aces","reduce","memo","x","push","getHigherValidValue","handValue","checkForBusted","isBlackjack","isSoftHand","some","isSuited","suite","every","countCards","systems","getHandInfo","playerCards","dealerCards","hasSplit","hasBlackjack","hasBusted","isClosed","canDoubleDown","canSplit","canInsure","cards","playerValue","playerHasBlackjack","playerHasBusted","playerHasSurrendered","close","availableActions","getHandInfoAfterDeal","initialBet","hand","getHandInfoAfterSplit","getHandInfoAfterHit","getHandInfoAfterDouble","getHandInfoAfterStand","handInfo","getHandInfoAfterSurrender","getHandInfoAfterInsurance","isLuckyLucky","v1","v2","v3","v4","getLuckyLuckyMultiplier","concat","isSameSuite","flatCards","map","join","isPerfectPairs","getSideBetsInfo","availableBets","sideBetsInfo","perfectPairs","multiplier","isActionAllowed","actionName","stage","indexOf","getPrize","playerHand","higherValidDealerValue","dealerHasBlackjack","dealerHasBusted","higherValidPlayerValue","getPrizes","history","left","right","finalBet","wonOnRight","wonOnLeft","getDefaultSideBets","active","royalMatch","luckyLadies","inBet","MatchTheDealer","getRules","decks","standOnSoft17","doubleAfterSplit","showdownAfterAceSplit","defaultState","rules","hits","finalWin","deck","constants","engine","presets","actions","Game","require","appendEpoch","Object","assign","ts","Date","getTime","initialState","state","dispatch","bind","getState","setState","enforceRules","_dispatch","canDouble","isLeft","historyHasSplit","whiteList","toLowerCase","playerDeal","splice","dealerValue","historyItem","filter","cardCount","insuranceValue","isFirstCardAce","insurancePrize","risk","win","playerCardsLeftPosition","playerCardsRightPosition","forceShowdown","cardRight","cardLeft","card","objCards","checkLeftStatus","check1","check2","suited","key"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a86bfdd330422da18c74","// @flow\n/*!\n * engine-blackjack\n * Copyright(c) 2016 Marco Casula\n * GPL 2.0 Licensed\n */\n\nexport const INVALID: string = 'INVALID'\nexport const RESTORE: string = 'RESTORE'\nexport const DEAL: string = 'DEAL'\nexport const INSURANCE: string = 'INSURANCE'\nexport const SPLIT: string = 'SPLIT'\nexport const HIT: string = 'HIT'\nexport const DOUBLE: string = 'DOUBLE'\nexport const STAND: string = 'STAND'\nexport const SURRENDER: string = 'SURRENDER'\nexport const SHOWDOWN: string = 'SHOWDOWN'\nexport const DEALER_HIT: string = 'DEALER-HIT'\nexport const RIGHT: string = 'right'\nexport const LEFT: string = 'left'\nexport const STAGE_READY: string = 'ready'\nexport const STAGE_PLAYER_TURN_RIGHT: string = 'player-turn-right'\nexport const STAGE_PLAYER_TURN_LEFT: string = 'player-turn-left'\nexport const STAGE_SHOWDOWN: string = 'showdown'\nexport const STAGE_DEALER_TURN: string = 'dealer-turn'\nexport const STAGE_DONE: string = 'done'\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants.js","// @flow\n/*!\n engine-blackjack\n Copyright (C) 2016 Marco Casula\n\n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License along\n with this program; if not, write to the Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport * as TYPES from './constants'\nimport type { Action, Card } from './types'\n\nexport const invalid = (action: Action, info: any): Action => {\n  return {\n    type: TYPES.INVALID,\n    payload: {\n      type: action.type,\n      payload: action.payload,\n      info: info\n    }\n  }\n}\n\nexport const restore = (): Action => {\n  return {\n    type: TYPES.RESTORE\n  }\n}\n\nexport const deal = ({ bet = 10, sideBets = { luckyLucky: 0 } }: { bet: number, sideBets: any } = {}): Action => {\n  return {\n    type: TYPES.DEAL,\n    payload: {\n      bet,\n      sideBets\n    }\n  }\n}\n\nexport const insurance = ({ bet = 0 }: { bet: number }): Action => {\n  return {\n    type: TYPES.INSURANCE,\n    payload: {\n      bet\n    }\n  }\n}\n\nexport const split = (): Action => {\n  return {\n    type: TYPES.SPLIT\n  }\n}\n\nexport const hit = ({ position = 'right' }: { position: string }): Action => {\n  return {\n    type: TYPES.HIT,\n    payload: {\n      position\n    }\n  }\n}\n\nexport const double = ({ position = 'right' }: { position: string }): Action => {\n  return {\n    type: TYPES.DOUBLE,\n    payload: {\n      position\n    }\n  }\n}\n\nexport const stand = ({ position = 'right' }: { position: string }): Action => {\n  return {\n    type: TYPES.STAND,\n    payload: {\n      position\n    }\n  }\n}\n\nexport const surrender = (): Action => {\n  return {\n    type: TYPES.SURRENDER\n  }\n}\n\nexport const showdown = ({ dealerHoleCardOnly = false }: { dealerHoleCardOnly: boolean } = { }): Action => {\n  return {\n    type: TYPES.SHOWDOWN,\n    payload: {\n      dealerHoleCardOnly\n    }\n  }\n}\n\nexport const dealerHit = ({ dealerHoleCard }: { dealerHoleCard: Card } = { }): Action => {\n  return {\n    type: TYPES.DEALER_HIT,\n    payload: {\n      dealerHoleCard\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/actions.js","// @flow\n/*!\n engine-blackjack\n Copyright (C) 2016 Marco Casula\n\n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License along\n with this program; if not, write to the Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport luckyLucky from './paytables/luchyLuchy'\nimport * as TYPES from './constants'\nimport type { SideBets, Card, Hand, HandInfo, HandValue } from './types'\n\nexport const isNull = (obj: ?any): boolean => obj === null\n\nexport const isUndefined = (obj: ?any): boolean => obj === undefined\n\nexport const isNullOrUndef = (obj: ?any): boolean => isUndefined(obj) || isNull(obj)\n\nexport const calculate = (array: Array<Card>): HandValue => {\n  if (array.length === 1) {\n    if (isNullOrUndef(array[0])) {\n      return null\n    }\n    const value = array[0].value\n    return {\n      hi: value === 1 ? 11 : value,\n      lo: value === 1 ? 1 : value\n    }\n  }\n  const aces = []\n  const value = array.reduce((memo, x) => {\n    if (x.value === 1) {\n      aces.push(1)\n      return memo\n    }\n    memo += x.value\n    return memo\n  }, 0)\n  return aces.reduce((memo) => {\n    if ((memo.hi + 11) <= 21) {\n      memo.hi += 11\n      memo.lo += 1\n    } else {\n      memo.hi += 1\n      memo.lo += 1\n    }\n    if (memo.hi > 21 && memo.lo <= 21) {\n      memo.hi = memo.lo\n    }\n    return memo\n  }, {\n    hi: value,\n    lo: value\n  })\n}\n\nexport const getHigherValidValue = (handValue: HandValue):number => handValue.hi <= 21 ? handValue.hi : handValue.lo\n\nexport const checkForBusted = (handValue: HandValue): boolean => (handValue.hi > 21) && (handValue.lo === handValue.hi)\n\nexport const isBlackjack = (array: Array<Card>): boolean => array.length === 2 && calculate(array).hi === 21\n\nexport const isSoftHand = (array: Array<Card>): boolean => {\n  return array.some(x => x.value === 1) &&\n    array\n      .reduce((memo, x) => {\n        memo += (x.value === 1 && memo < 11) ? 11 : x.value\n        return memo\n      }, 0) === 17\n}\n\nexport const isSuited = (array: Array<Card> = []): boolean => {\n  if (array.length === 0) {\n    return false\n  }\n  const suite = array[0].suite\n  return array.every(x => x.suite === suite)\n}\n\nexport const countCards = (array: Array<Card>) => {\n  const systems = {\n    'Hi-Lo': [ -1, 1, 1, 1, 1, 1, 0, 0, 0, -1, -1, -1, -1 ]\n  }\n  return array.reduce((memo, x) => {\n    memo += systems['Hi-Lo'][x.value - 1]\n    return memo\n  }, 0)\n}\n\nexport const getHandInfo = (playerCards: Array<Card>, dealerCards: Array<Card>, hasSplit:boolean = false): Hand => {\n  const handValue = calculate(playerCards)\n  if (!handValue) {\n    return null\n  }\n  const hasBlackjack = isBlackjack(playerCards) && hasSplit === false\n  const hasBusted = checkForBusted(handValue)\n  const isClosed = hasBusted || hasBlackjack || handValue.hi === 21\n  const canDoubleDown = !isClosed && true\n  const canSplit = playerCards.length > 1 && playerCards[ 0 ].value === playerCards[ 1 ].value && !isClosed\n  const canInsure = dealerCards[ 0 ].value === 1 && !isClosed\n  return {\n    cards: playerCards,\n    playerValue: handValue,\n    playerHasBlackjack: hasBlackjack,\n    playerHasBusted: hasBusted,\n    playerHasSurrendered: false,\n    close: isClosed,\n    availableActions: {\n      double: canDoubleDown,\n      split: canSplit,\n      insurance: canInsure,\n      hit: !isClosed,\n      stand: !isClosed,\n      surrender: !isClosed\n    }\n  }\n}\n\nexport const getHandInfoAfterDeal = (playerCards: Array<Card>, dealerCards: Array<Card>, initialBet: number): Hand => {\n  const hand = getHandInfo(playerCards, dealerCards)\n  hand.bet = initialBet\n  // After deal, even if we got a blackjack the hand cannot be considered closed.\n  const availableActions = hand.availableActions\n  hand.availableActions = {\n    ...availableActions,\n    stand: true,\n    hit: true,\n    surrender: true\n  }\n  return {\n    ...hand,\n    close: hand.playerHasBlackjack\n  }\n}\n\nexport const getHandInfoAfterSplit = (playerCards: Array<Card>, dealerCards: Array<Card>, initialBet: number): Hand => {\n  const hand = getHandInfo(playerCards, dealerCards, true)\n  const availableActions = hand.availableActions\n  hand.availableActions = {\n    ...availableActions,\n    split: false,\n    double: !hand.close && (playerCards.length === 2),\n    insurance: false,\n    surrender: false\n  }\n  hand.bet = initialBet\n  return hand\n}\n\nexport const getHandInfoAfterHit = (playerCards: Array<Card>, dealerCards: Array<Card>, initialBet: number, hasSplit: boolean): Hand => {\n  const hand = getHandInfo(playerCards, dealerCards, hasSplit)\n  const availableActions = hand.availableActions\n  hand.availableActions = {\n    ...availableActions,\n    double: (playerCards.length === 2),\n    split: false,\n    insurance: false,\n    surrender: false\n  }\n  hand.bet = initialBet\n  return hand\n}\n\nexport const getHandInfoAfterDouble = (playerCards: Array<Card>, dealerCards: Array<Card>, initialBet: number, hasSplit: boolean): Hand => {\n  const hand = getHandInfoAfterHit(playerCards, dealerCards, initialBet, hasSplit)\n  const availableActions = hand.availableActions\n  hand.availableActions = {\n    ...availableActions,\n    hit: false,\n    stand: false\n  }\n  hand.bet = initialBet * 2\n  return {\n    ...hand,\n    close: true\n  }\n}\n\nexport const getHandInfoAfterStand = (handInfo: Hand): Hand => {\n  return {\n    ...handInfo,\n    close: true,\n    availableActions: {\n      double: false,\n      split: false,\n      insurance: false,\n      hit: false,\n      stand: false,\n      surrender: false\n    }\n  }\n}\n\nexport const getHandInfoAfterSurrender = (handInfo: Hand): Hand => {\n  const hand = getHandInfoAfterStand(handInfo)\n  return {\n    ...hand,\n    playerHasSurrendered: true,\n    close: true\n  }\n}\n\nexport const getHandInfoAfterInsurance = (playerCards: Array<Card>, dealerCards: Array<Card>): Hand => {\n  const hand = getHandInfo(playerCards, dealerCards)\n  const availableActions = hand.availableActions\n  hand.availableActions = {\n    ...availableActions,\n    stand: true,\n    hit: true,\n    surrender: true,\n    insurance: false\n  }\n  return {\n    ...hand,\n    close: hand.playerHasBlackjack\n  }\n}\n\nexport const isLuckyLucky = (playerCards: Array<Card>, dealerCards: Array<Card>): boolean => {\n  // Player hand and dealer's up card sum to 19, 20, or 21 (\"Lucky Lucky\")\n  const v1 = calculate(playerCards).hi + calculate(dealerCards).hi\n  const v2 = calculate(playerCards).lo + calculate(dealerCards).lo\n  const v3 = calculate(playerCards).hi + calculate(dealerCards).lo\n  const v4 = calculate(playerCards).lo + calculate(dealerCards).hi\n  return (v1 >= 19 && v1 <= 21) || (v2 >= 19 && v2 <= 21) || (v3 >= 19 && v3 <= 21) || (v4 >= 19 && v4 <= 21)\n}\n\nexport const getLuckyLuckyMultiplier = (playerCards: Array<Card>, dealerCards: Array<Card>) => {\n  const cards = [].concat(playerCards, dealerCards)\n  const isSameSuite = isSuited(cards)\n  const flatCards = cards.map(x => x.value).join('')\n  const value = calculate(cards)\n  return luckyLucky(flatCards, isSameSuite, value)\n}\n\nexport const isPerfectPairs = (playerCards: Array<Card>): boolean => playerCards[0].value === playerCards[1].value\n\nexport const getSideBetsInfo = (availableBets: SideBets, sideBets: SideBets, playerCards: Array<Card>, dealerCards: Array<Card>): any => {\n  const sideBetsInfo = {\n    luckyLucky: 0,\n    perfectPairs: 0\n  }\n  if (availableBets.luckyLucky && sideBets.luckyLucky && isLuckyLucky(playerCards, dealerCards)) {\n    const multiplier = getLuckyLuckyMultiplier(playerCards, dealerCards)\n    sideBetsInfo.luckyLucky = sideBets.luckyLucky * multiplier\n  }\n  if (availableBets.perfectPairs && sideBets.perfectPairs && isPerfectPairs(playerCards)) {\n    // TODO: impl colored pairs\n    // TODO: impl mixed pairs\n    sideBetsInfo.perfectPairs = sideBets.perfectPairs * 5\n  }\n  return sideBetsInfo\n}\n\nexport const isActionAllowed = (actionName: string, stage: string): boolean => {\n  if (actionName === TYPES.RESTORE) {\n    return true\n  }\n  switch (stage) {\n    case TYPES.STAGE_READY: {\n      return [TYPES.RESTORE, TYPES.DEAL].indexOf(actionName) > -1\n    }\n    case TYPES.STAGE_PLAYER_TURN_RIGHT: {\n      return [TYPES.STAND, TYPES.INSURANCE, TYPES.SURRENDER, TYPES.SPLIT, TYPES.HIT, TYPES.DOUBLE].indexOf(actionName) > -1\n    }\n    case TYPES.STAGE_PLAYER_TURN_LEFT: {\n      return [TYPES.STAND, TYPES.HIT, TYPES.DOUBLE].indexOf(actionName) > -1\n    }\n    case TYPES.SHOWDOWN: {\n      return [TYPES.SHOWDOWN, TYPES.STAND].indexOf(actionName) > -1\n    }\n    case TYPES.STAGE_DEALER_TURN: {\n      return [TYPES.DEALER_HIT].indexOf(actionName) > -1\n    }\n    default: {\n      return false\n    }\n  }\n}\n\nexport const getPrize = (playerHand: Hand, dealerCards: Array<Card>): number => {\n  const {\n    close = false,\n    playerHasSurrendered = true,\n    playerHasBlackjack = false,\n    playerHasBusted = true,\n    playerValue = {},\n    bet = 0\n  } = playerHand\n  const higherValidDealerValue = getHigherValidValue(calculate(dealerCards))\n  const dealerHasBlackjack = isBlackjack(dealerCards)\n  if (!close) {\n    return 0\n  }\n  if (playerHasBusted) {\n    return 0\n  }\n  if (playerHasSurrendered) {\n    return bet / 2\n  }\n  if (playerHasBlackjack && !dealerHasBlackjack) {\n    return bet + (bet * 1.5)\n  }\n  const dealerHasBusted = higherValidDealerValue > 21\n  if (dealerHasBusted) {\n    return (bet + bet)\n  }\n  const higherValidPlayerValue = getHigherValidValue(playerValue)\n  if (higherValidPlayerValue > higherValidDealerValue) {\n    return (bet + bet)\n  } else if (higherValidPlayerValue === higherValidDealerValue) {\n    return bet\n  }\n  return 0\n}\n\nexport const getPrizes = ({ history, handInfo: { left, right }, dealerCards }: { history: Array<any>, handInfo: HandInfo, dealerCards: Array<Card>}) => {\n  const finalBet = history.reduce((memo, x) => {\n    memo += x.value\n    return memo\n  }, 0)\n  const wonOnRight = getPrize(right, dealerCards)\n  const wonOnLeft = getPrize(left, dealerCards)\n  return {\n    finalBet: finalBet,\n    wonOnRight: wonOnRight,\n    wonOnLeft: wonOnLeft\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine.js","// @flow\n/*!\n engine-blackjack\n Copyright (C) 2016 Marco Casula\n\n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License along\n with this program; if not, write to the Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\nimport * as TYPES from './constants'\nimport { shuffle, newDecks } from '52-deck'\nimport type { SideBets, Rule, State } from './types'\n\nexport const getDefaultSideBets = (active: boolean = false) : SideBets => {\n  return {\n    luckyLucky: active,\n    perfectPairs: active,\n    royalMatch: active,\n    luckyLadies: active,\n    inBet: active,\n    MatchTheDealer: active\n  }\n}\n\nexport const getRules = ({\n  decks = 1,\n  standOnSoft17 = true,\n  double = 'any',\n  split = true,\n  doubleAfterSplit = true,\n  surrender = true,\n  insurance = true,\n  showdownAfterAceSplit = true\n}: Rule) => {\n  return {\n    decks: decks || 1,\n    standOnSoft17: standOnSoft17,\n    double: double,\n    split: split,\n    doubleAfterSplit: doubleAfterSplit,\n    surrender: surrender,\n    insurance: insurance,\n    showdownAfterAceSplit: showdownAfterAceSplit\n  }\n}\n\nexport const defaultState = (rules: Rule) : State => {\n  return {\n    hits: 0,\n    initialBet: 0,\n    finalBet: 0,\n    finalWin: 0,\n    wonOnRight: 0,\n    wonOnLeft: 0,\n    stage: TYPES.STAGE_READY,\n    deck: shuffle(newDecks(rules.decks)),\n    handInfo: {\n      left: {},\n      right: {}\n    },\n    history: [],\n    availableBets: getDefaultSideBets(true),\n    sideBetsInfo: {},\n    rules: rules,\n    dealerHoleCard: null,\n    dealerHasBlackjack: false,\n    dealerHasBusted: false\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/presets.js","// @flow\n/*!\n * engine-blackjack\n * Copyright(c) 2016 Marco Casula\n * GPL 2.0 Licensed\n */\n\n'use strict'\nimport * as constants from './constants'\nimport * as engine from './engine'\nimport * as presets from './presets'\nimport * as actions from './actions'\nimport Game from './game'\n\nexport {\n  constants,\n  engine,\n  presets,\n  actions,\n  Game\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// @flow\n/*!\n engine-blackjack\n Copyright (C) 2016 Marco Casula\n\n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2 of the License.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License along\n with this program; if not, write to the Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport * as TYPES from './constants'\nimport * as engine from './engine'\nimport type { Action, State, Hand, HandValue, Rule } from './types'\nimport { defaultState, getDefaultSideBets, getRules } from './presets'\nconst actions = require('./actions')\n\nconst appendEpoch = (obj) => {\n  const { payload = { bet: 0 } } = obj\n  return Object.assign(\n    {},\n    obj,\n    {\n      value: payload.bet || 0,\n      ts: new Date().getTime()\n    }\n  )\n}\n\nexport default class Game {\n  state: State = {}\n  dispatch: Function\n  _dispatch: Function\n  getState: Function\n  setState: Function\n  enforceRules: Function\n  constructor (initialState: State, rules: Rule = getRules({})) {\n    this.state = initialState ? Object.assign({}, initialState) : defaultState(rules)\n    this.dispatch = this.dispatch.bind(this)\n    this.getState = this.getState.bind(this)\n    this.setState = this.setState.bind(this)\n    this.enforceRules = this.enforceRules.bind(this)\n    this._dispatch = this._dispatch.bind(this)\n  }\n\n  canDouble (double: string, playerValue: HandValue): boolean {\n    if (double === 'none') {\n      return false\n    } else if (double === '9or10') {\n      return ((playerValue.hi === 9) || (playerValue.hi === 10))\n    } else if (double === '9or10or11') {\n      return ((playerValue.hi >= 9) && (playerValue.hi <= 11))\n    } else if (double === '9thru15') {\n      return ((playerValue.hi >= 9) && (playerValue.hi <= 15))\n    } else {\n      return true\n    }\n  }\n\n  enforceRules (handInfo: Hand): Hand {\n    const { availableActions } = handInfo\n    const { playerValue } = handInfo\n    const { rules, history } = this.state\n    if (!this.canDouble(rules.double, playerValue)) {\n      availableActions.double = false\n    }\n    if (!rules.split) {\n      availableActions.split = false\n    }\n    if (!rules.surrender) {\n      availableActions.surrender = false\n    }\n    if (!rules.doubleAfterSplit) {\n      if (history.some(x => x.type === TYPES.SPLIT)) {\n        availableActions.double = false\n      }\n    }\n    if (!rules.insurance) {\n      availableActions.insurance = false\n    }\n    return handInfo\n  }\n\n  getState () : State {\n    return {\n      ...this.state\n    }\n  }\n\n  setState (state: State): void {\n    this.state = {\n      ...this.state,\n      ...state\n    }\n  }\n\n  dispatch (action: Action): State {\n    const { stage, handInfo, history } = this.state\n    const { type, payload = {} } = action\n    const { position = TYPES.RIGHT } = payload\n    const isLeft = position === TYPES.LEFT\n    const historyHasSplit = history.some(x => x.type === TYPES.SPLIT)\n    const hand = handInfo[position]\n\n    let isActionAllowed = engine.isActionAllowed(type, stage)\n\n    if (!isActionAllowed) {\n      return this._dispatch(actions.invalid(action, `${type} is not allowed when stage is ${stage}`))\n    }\n\n    const whiteList = [TYPES.RESTORE, TYPES.DEAL, TYPES.SHOWDOWN]\n\n    if (isActionAllowed && whiteList.some(x => x === type)) {\n      // this is a safe action. We do not need to check the status of the stage\n      // so we return the result now!\n      if (type === TYPES.DEAL && typeof payload.bet !== 'number') {\n        return this._dispatch(actions.invalid(action, `${type} without bet value on stage ${stage}`))\n      }\n      return this._dispatch(action)\n    }\n\n    if (hand.close) {\n      // TODO: consolidate this one, probably is just enough to consider the availableActions (see more below)\n      return this._dispatch(actions.invalid(action, `${type} is not allowed because \"${position}\" side of the table is closed on \"${stage}\"`))\n    }\n\n    if (isLeft && !historyHasSplit) {\n      // You want to do something on \"left\" but no split found in history.\n      // default side is \"right\". When an action want to edit the \"left\" side of the table\n      // a valid split should be appear in the history. If not, \"left\" position is not ready to be changed\n      if (!history.some(x => x.type === TYPES.SPLIT)) {\n        return this._dispatch(actions.invalid(action, `${type} is not allowed because there is no SPLIT in current stage \"${stage}\"`))\n      }\n    }\n\n    if (isLeft && !handInfo.right.close) {\n      // You want to do something on \"left\" but \"right\" is still open\n      return this._dispatch(actions.invalid(action, `${type} is not allowed because you need to finish \"left\" hand \"${stage}\"`))\n    }\n\n    if (!hand.availableActions[type.toLowerCase()]) {\n      return this._dispatch(actions.invalid(action, `${type} is not currently allowed on position \"${position}\". Stage is \"${stage}\"`))\n    }\n\n    return this._dispatch(action)\n  }\n\n  _dispatch (action: Action): State {\n    switch (action.type) {\n      case TYPES.DEAL: {\n        const { bet, sideBets } = action.payload\n        const { rules: { insurance }, availableBets, history, hits } = this.state\n        /*\n        const playerCards = this.state.deck.splice(this.state.deck.length - 2, 2)\n        const dealerCards = this.state.deck.splice(this.state.deck.length - 1, 1)\n        playerCards.concat(this.state.deck.splice(this.state.deck.length - 2, 2)\n        const dealerHoleCard = this.state.deck.splice(this.state.deck.length - 1, 1)[ 0 ]\n        */\n        \n        var playerDeal = this.state.deck.splice(this.state.deck.length - 1, 1)\n        const dealerHoleCard = this.state.deck.splice(this.state.deck.length - 1, 1)[ 0 ]\n        playerDeal = playerDeal.concat(this.state.deck.splice(this.state.deck.length - 1, 1))\n        const dealerCards = this.state.deck.splice(this.state.deck.length - 1, 1)\n\n        const playerCards = playerDeal\n        \n        const dealerValue = engine.calculate(dealerCards)\n        let dealerHasBlackjack = engine.isBlackjack(dealerCards.concat([dealerHoleCard]))\n        const right = this.enforceRules(engine.getHandInfoAfterDeal(playerCards, dealerCards, bet))\n        if (insurance && dealerValue.lo === 1) {\n          dealerHasBlackjack = false\n          right.availableActions = {\n            ...right.availableActions,\n            stand: false,\n            double: false,\n            hit: false,\n            split: false,\n            surrender: false\n          }\n        }\n        const sideBetsInfo = engine.getSideBetsInfo(availableBets, sideBets, playerCards, dealerCards)\n        const historyItem = appendEpoch({\n          ...action,\n          right: playerCards,\n          dealerCards\n        })\n        this.setState({\n          initialBet: bet,\n          stage: TYPES.STAGE_PLAYER_TURN_RIGHT,\n          dealerCards: dealerCards,\n          dealerHoleCard: dealerHoleCard,\n          dealerValue: dealerValue,\n          dealerHasBlackjack: dealerHasBlackjack,\n          deck: this.state.deck.filter(x => dealerCards\n              .concat(playerCards)\n              .indexOf(x) === -1),\n          cardCount: engine.countCards(playerCards.concat(dealerCards)),\n          handInfo: {\n            left: {},\n            right\n          },\n          sideBetsInfo: sideBetsInfo,\n          availableBets: getDefaultSideBets(false),\n          history: history.concat(historyItem),\n          hits: hits + 1\n        })\n\n        if (right.playerHasBlackjack) {\n          // purpose of the game archived !!!\n          this._dispatch(actions.showdown())\n          break\n        }\n        if (dealerHasBlackjack) {\n          if (!right.availableActions.insurance) {\n            // nothing left, let's go and tell the customer he loses this game\n            this._dispatch(actions.showdown())\n          }\n        // else\n        // in this case, the game must continue in \"player-turn-right\"\n        // waiting for the insurance action\n        }\n        break\n      }\n      case TYPES.INSURANCE: {\n        const { bet = 0 } = action.payload\n        const { sideBetsInfo, handInfo, dealerCards, dealerHoleCard, initialBet, history, hits } = this.state\n        const dealerHasBlackjack = engine.isBlackjack(dealerCards.concat([dealerHoleCard]))\n        const insuranceValue = bet > 0 ? initialBet / 2 : 0\n        const isFirstCardAce = dealerCards[0].value === 1\n        const insurancePrize = (isFirstCardAce && dealerHasBlackjack && insuranceValue > 0 && bet > 0) ? insuranceValue * 3 : 0\n        const right = this.enforceRules(engine.getHandInfoAfterInsurance(handInfo.right.cards, dealerCards))\n        right.bet = initialBet\n        right.close = dealerHasBlackjack\n        const historyItem = appendEpoch({\n          ...action,\n          payload: { bet: insuranceValue || 0 }\n        })\n        this.setState({\n          handInfo: { left: {}, right },\n          history: history.concat(historyItem),\n          hits: hits + 1,\n          sideBetsInfo: {\n            ...sideBetsInfo,\n            insurance: {\n              risk: insuranceValue,\n              win: insurancePrize\n            }\n          }\n        })\n        if (dealerHasBlackjack) {\n          this._dispatch(actions.showdown())\n        }\n        break\n      }\n      case TYPES.SPLIT: {\n        const { rules, initialBet, handInfo, dealerCards, history, hits } = this.state\n        let deck = this.state.deck\n        const playerCardsLeftPosition = [handInfo.right.cards[ 0 ]]\n        const playerCardsRightPosition = [handInfo.right.cards[ 1 ]]\n        const forceShowdown = rules.showdownAfterAceSplit && playerCardsRightPosition[ 0 ].value === 1\n        let cardRight = deck.splice(deck.length - 2, 1)\n        let cardLeft = deck.splice(deck.length - 1, 1)\n        deck = deck.filter(x => [ cardLeft, cardRight ].indexOf(x) === -1)\n        playerCardsLeftPosition.push(cardLeft[ 0 ])\n        playerCardsRightPosition.push(cardRight[ 0 ])\n        const historyItem = appendEpoch({\n          ...action,\n          payload: { bet: initialBet },\n          left: playerCardsLeftPosition,\n          right: playerCardsRightPosition\n        })\n        let left = this.enforceRules(engine.getHandInfoAfterSplit(playerCardsLeftPosition, dealerCards, initialBet))\n        let right = this.enforceRules(engine.getHandInfoAfterSplit(playerCardsRightPosition, dealerCards, initialBet))\n        let stage = ''\n        if (forceShowdown) {\n          stage = TYPES.STAGE_SHOWDOWN\n          left.close = true\n          right.close = true\n        } else {\n          if (right.close) {\n            stage = TYPES.STAGE_PLAYER_TURN_LEFT\n          } else {\n            stage = TYPES.STAGE_PLAYER_TURN_RIGHT\n          }\n        }\n        if (right.close && left.close) {\n          stage = TYPES.STAGE_SHOWDOWN\n        }\n        this.setState({\n          stage: stage,\n          handInfo: {\n            left,\n            right\n          },\n          deck: deck,\n          history: history.concat(historyItem),\n          hits: hits + 1\n        })\n        if (stage === TYPES.STAGE_SHOWDOWN) {\n          this._dispatch(actions.showdown())\n        }\n        break\n      }\n      case TYPES.HIT: {\n        let stage = ''\n        const { initialBet, deck, handInfo, dealerCards, cardCount, history, hits } = this.state\n        const position = action.payload.position\n        const card = deck.splice(deck.length - 1, 1)\n        let playerCards = []\n        let left = {}\n        let right = {}\n        const hasSplit = history.some(x => x.type === TYPES.SPLIT)\n        if (position === TYPES.LEFT) {\n          playerCards = handInfo.left.cards.concat(card)\n          left = engine.getHandInfoAfterHit(playerCards, dealerCards, initialBet, hasSplit)\n          right = Object.assign({}, handInfo.right)\n          if (left.close) {\n            stage = TYPES.STAGE_SHOWDOWN\n          } else {\n            stage = `player-turn-${position}`\n          }\n        } else {\n          playerCards = handInfo.right.cards.concat(card)\n          right = engine.getHandInfoAfterHit(playerCards, dealerCards, initialBet, hasSplit)\n          left = Object.assign({}, handInfo.left)\n          if (right.close) {\n            if (history.some(x => x.type === TYPES.SPLIT)) {\n              stage = TYPES.STAGE_PLAYER_TURN_LEFT\n            } else {\n              stage = TYPES.STAGE_SHOWDOWN\n            }\n          } else {\n            stage = `player-turn-${position}`\n          }\n          if (right.close && left.close) {\n            stage = TYPES.STAGE_SHOWDOWN\n          }\n        }\n        const objCards = {}\n        objCards[position] = playerCards\n        const historyItem = appendEpoch({\n          ...action,\n          ...objCards\n        })\n        this.setState({\n          stage: stage,\n          handInfo: { left, right },\n          deck: deck.filter(x => playerCards.indexOf(x) === -1),\n          cardCount: cardCount + engine.countCards(card),\n          history: history.concat(historyItem),\n          hits: hits + 1\n        })\n        if (stage === TYPES.STAGE_SHOWDOWN) {\n          this._dispatch(actions.showdown())\n        }\n        break\n      }\n      case TYPES.DOUBLE: {\n        let stage = ''\n        const { initialBet, deck, handInfo, dealerCards, cardCount, history, hits } = this.state\n        const position = action.payload.position\n        const card = deck.splice(deck.length - 1, 1)\n        let playerCards: Array<card> = []\n        let left = {}\n        let right = {}\n        const hasSplit = history.some(x => x.type === TYPES.SPLIT)\n        // TODO: remove position and replace it with stage info #hit\n        if (position === TYPES.LEFT) {\n          right = Object.assign({}, handInfo.right)\n          playerCards = handInfo.left.cards.concat(card)\n          left = engine.getHandInfoAfterDouble(playerCards, dealerCards, initialBet, hasSplit)\n          if (left.close) {\n            stage = TYPES.STAGE_SHOWDOWN\n          } else {\n            stage = `player-turn-${position}`\n          }\n        } else {\n          playerCards = handInfo.right.cards.concat(card)\n          left = Object.assign({}, handInfo.left)\n          right = engine.getHandInfoAfterDouble(playerCards, dealerCards, initialBet, hasSplit)\n          if (right.close) {\n            if (history.some(x => x.type === TYPES.SPLIT)) {\n              stage = TYPES.STAGE_PLAYER_TURN_LEFT\n            } else {\n              stage = TYPES.STAGE_SHOWDOWN\n            }\n          } else {\n            stage = `player-turn-${position}`\n          }\n        }\n        const objCards = {}\n        objCards[position] = playerCards\n        const historyItem = appendEpoch({\n          ...action,\n          payload: { bet: initialBet },\n          ...objCards\n        })\n        this.setState({\n          stage: stage,\n          handInfo: { left, right },\n          deck: deck.filter(x => playerCards.indexOf(x) === -1),\n          cardCount: cardCount + engine.countCards(card),\n          history: history.concat(historyItem),\n          hits: hits + 1\n        })\n        this._dispatch(actions.stand(position))\n        break\n      }\n      case TYPES.STAND: {\n        let stage = ''\n        const { handInfo, history, hits } = this.state\n        const position = action.payload.position\n        let left = {}\n        let right = {}\n        const hasSplit = history.some(x => x.type === TYPES.SPLIT)\n        if (position === TYPES.LEFT) {\n          right = Object.assign({}, handInfo.right)\n          left = engine.getHandInfoAfterStand(handInfo.left)\n          stage = TYPES.STAGE_SHOWDOWN\n        }\n        if (position === TYPES.RIGHT) {\n          left = Object.assign({}, handInfo.left)\n          right = engine.getHandInfoAfterStand(handInfo.right)\n          if (right.close) {\n            stage = TYPES.STAGE_SHOWDOWN\n          }\n        }\n        if (hasSplit) {\n          stage = stage !== TYPES.STAGE_SHOWDOWN ? TYPES.STAGE_PLAYER_TURN_LEFT : TYPES.STAGE_SHOWDOWN\n        }\n        if (hasSplit && !left.close) {\n          stage = TYPES.STAGE_PLAYER_TURN_LEFT\n        }\n        const historyItem = appendEpoch(action)\n        this.setState({\n          stage,\n          handInfo: { left, right },\n          history: history.concat(historyItem),\n          hits: hits + 1\n        })\n        if (stage === TYPES.STAGE_SHOWDOWN) {\n          this._dispatch(actions.showdown())\n        }\n        break\n      }\n      case TYPES.SHOWDOWN: {\n        const { dealerHoleCard, handInfo, history, hits } = this.state\n        const { dealerHoleCardOnly } = action.payload\n        const historyItem = appendEpoch(action)\n        this.setState({\n          stage: TYPES.STAGE_DEALER_TURN,\n          history: history.concat(historyItem),\n          hits: hits + 1\n        })\n        // we want to include in the calculation the dealerHoleCard obtained in initial deal()\n        this._dispatch(actions.dealerHit({ dealerHoleCard: dealerHoleCard }))\n        if (dealerHoleCardOnly) {\n          this.setState({\n            stage: TYPES.STAGE_DONE,\n            ...engine.getPrizes(this.state)\n          })\n          break\n        }\n        const checkLeftStatus = history.some(x => x.type === TYPES.SPLIT)\n        const check1 = (handInfo.right.playerHasBusted || handInfo.right.playerHasBlackjack) && !checkLeftStatus\n        if (check1) {\n          this.setState({\n            stage: TYPES.STAGE_DONE,\n            ...engine.getPrizes(this.state)\n          })\n          break\n        }\n        const check2 = checkLeftStatus && (handInfo.left.playerHasBusted || handInfo.left.playerHasBlackjack) && check1\n        if (check2) {\n          this.setState({\n            stage: TYPES.STAGE_DONE,\n            ...engine.getPrizes(this.state)\n          })\n          break\n        }\n        if (checkLeftStatus && handInfo.left.playerHasBusted && handInfo.right.playerHasBusted) {\n          this.setState({\n            stage: TYPES.STAGE_DONE,\n            ...engine.getPrizes(this.state)\n          })\n          break\n        }\n        while (this.getState().stage === TYPES.STAGE_DEALER_TURN) {\n          this._dispatch(actions.dealerHit())\n        }\n        this.setState({\n          ...engine.getPrizes(this.state)\n        })\n        break\n      }\n      case TYPES.SURRENDER: {\n        const { handInfo, history, hits } = this.state\n        handInfo.right = engine.getHandInfoAfterSurrender(handInfo.right)\n        const historyItem = appendEpoch(action)\n        this.setState({\n          stage: TYPES.STAGE_SHOWDOWN,\n          handInfo: handInfo,\n          history: history.concat(historyItem),\n          hits: hits + 1\n        })\n        this._dispatch(actions.showdown({ dealerHoleCardOnly: true }))\n        break\n      }\n      case TYPES.DEALER_HIT: {\n        const { rules, deck, cardCount, history, hits } = this.state\n        // the new card for dealer can be the \"dealerHoleCard\" or a new card\n        // dealerHoleCard was set at the deal()\n        const { dealerHoleCard } = action.payload\n        const card = dealerHoleCard || deck.splice(deck.length - 1, 1)[ 0 ]\n        const dealerCards = this.state.dealerCards.concat([card])\n        const dealerValue = engine.calculate(dealerCards)\n        const dealerHasBlackjack = engine.isBlackjack(dealerCards)\n        const dealerHasBusted = dealerValue.hi > 21\n        let stage = null\n        if (dealerValue.hi < 17) {\n          stage = TYPES.STAGE_DEALER_TURN\n        } else {\n          if (!rules.standOnSoft17 && engine.isSoftHand(dealerCards)) {\n            stage = TYPES.STAGE_DEALER_TURN\n          } else {\n            stage = TYPES.STAGE_DONE\n          }\n        }\n        const historyItem = appendEpoch({\n          ...action,\n          dealerCards\n        })\n        this.setState({\n          stage: stage,\n          dealerCards: dealerCards,\n          dealerValue: dealerValue,\n          dealerHasBlackjack: dealerHasBlackjack,\n          dealerHasBusted: dealerHasBusted,\n          deck: deck.filter(x => dealerCards.indexOf(x) === -1),\n          cardCount: cardCount + engine.countCards([card]),\n          history: history.concat(historyItem),\n          hits: hits + 1\n        })\n        break\n      }\n      default: {\n        const { history, hits } = this.state\n        const historyItem = appendEpoch(action)\n        this.setState({\n          hits: hits + 1,\n          history: history.concat(historyItem)\n        })\n        break\n      }\n    }\n    return this.getState()\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/game.js","export default (flatCards, suited, value) => {\n  const key = `${flatCards}${suited ? 's' : ''}`\n  if (key === '777s') {\n    return 200\n  }\n  if (key === '678s') {\n    return 100\n  }\n  if (key === '777') {\n    return 50\n  }\n  if (key === '678') {\n    return 30\n  }\n  if ((value.hi === 21 || value.lo === 21) && suited) {\n    return 10\n  }\n  if ((value.hi === 21 || value.lo === 21) && !suited) {\n    return 3\n  }\n  if ((value.hi === 20 || value.lo === 20)) {\n    return 3\n  }\n  if (value.hi === 19 || value.lo === 19) {\n    return 2\n  }\n  return 0\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/paytables/luchyLuchy.js","module.exports = require(\"52-deck\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"52-deck\"\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}